import React, { useState } from 'react';
import './RoomGrid.css';

const RoomGrid = ({ darkMode }) => {
  const [filter, setFilter] = useState('all'); // 'all', 'occupied', 'available', 'maintenance'

  const rooms = [
    {
      id: '2A08',
      title: 'C·∫•u Tr√∫c d·ªØ li·ªáu nh√≥m 1 2021-2022 2',
      devices: [
        { name: 'Remote', count: 1, icon: 'üì∫' },
        { name: 'Micro', count: 1, icon: 'üé§' },
        { name: 'Ch√¨a Kh√≥a', count: 2, icon: 'üîë' }
      ],
      type: 'occupied',
      status: 'ƒêang s·ª≠ d·ª•ng'
    },
    {
      id: '2A16',
      title: 'C√¥ng Ngh·ªá Ph·∫ßn M·ªÅm nh√≥m 2 2021-2022 1',
      devices: [
        { name: 'Micro', count: 1, icon: 'üé§' },
        { name: 'Ch√¨a Kh√≥a', count: 1, icon: 'üîë' }
      ],
      type: 'occupied',
      status: 'ƒêang s·ª≠ d·ª•ng'
    },
    {
      id: '2A36',
      title: '',
      devices: [
        { name: 'Remote', count: 1, icon: 'üì∫' },
        { name: 'Micro', count: 1, icon: 'üé§' },
        { name: 'Ch√¨a Kh√≥a', count: 1, icon: 'üîë' }
      ],
      type: 'available',
      status: 'S·∫µn s√†ng'
    },
    {
      id: '2B11',
      title: '',
      devices: [],
      type: 'maintenance',
      status: 'B·∫£o tr√¨'
    },
    {
      id: '2B25',
      title: '',
      devices: [
        { name: 'Ch√¨a Kh√≥a', count: 1, icon: 'üîë' }
      ],
      type: 'available',
      status: 'S·∫µn s√†ng'
    },
    {
      id: '2B32',
      title: '',
      devices: [
        { name: 'Remote', count: 2, icon: 'üì∫' },
        { name: 'Micro', count: 3, icon: 'üé§' },
        { name: 'Ch√¨a Kh√≥a', count: 2, icon: 'üîë' }
      ],
      type: 'available',
      status: 'S·∫µn s√†ng'
    },
    {
      id: '2C15',
      title: 'Th·ª±c h√†nh L·∫≠p tr√¨nh Web',
      devices: [
        { name: 'M√°y chi·∫øu', count: 1, icon: 'üìΩÔ∏è' },
        { name: 'Laptop', count: 2, icon: 'üíª' },
        { name: 'Ch√¨a Kh√≥a', count: 1, icon: 'üîë' }
      ],
      type: 'occupied',
      status: 'ƒêang s·ª≠ d·ª•ng'
    },
    {
      id: '2C22',
      title: '',
      devices: [
        { name: 'Micro', count: 2, icon: 'üé§' },
        { name: 'Loa', count: 1, icon: 'üîä' }
      ],
      type: 'available',
      status: 'S·∫µn s√†ng'
    },
    {
      id: '3A01',
      title: '',
      devices: [
        { name: 'M√°y t√≠nh', count: 1, icon: 'üñ•Ô∏è' }
      ],
      type: 'maintenance',
      status: 'B·∫£o tr√¨'
    }
  ];

  const filteredRooms = rooms.filter(room => {
    if (filter === 'all') return true;
    return room.type === filter;
  });

  const getStatusText = (type) => {
    switch (type) {
      case 'occupied': return 'ƒêang s·ª≠ d·ª•ng';
      case 'available': return 'S·∫µn s√†ng';
      case 'maintenance': return 'B·∫£o tr√¨';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const getActionText = (type) => {
    switch (type) {
      case 'occupied': return 'üìã Xem chi ti·∫øt';
      case 'available': return 'üìù L·∫≠p phi·∫øu m∆∞·ª£n';
      case 'maintenance': return 'üîß ƒêang b·∫£o tr√¨';
      default: return '‚ùì Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const handleRoomAction = (room) => {
    console.log(`Action for room ${room.id}:`, room.type);
    // X·ª≠ l√Ω logic cho t·ª´ng lo·∫°i ph√≤ng
    switch (room.type) {
      case 'available':
        alert(`L·∫≠p phi·∫øu m∆∞·ª£n cho ph√≤ng ${room.id}`);
        break;
      case 'occupied':
        alert(`Xem chi ti·∫øt ph√≤ng ${room.id}`);
        break;
      case 'maintenance':
        alert(`Ph√≤ng ${room.id} ƒëang trong qu√° tr√¨nh b·∫£o tr√¨`);
        break;
      default:
        alert(`H√†nh ƒë·ªông cho ph√≤ng ${room.id}`);
    }
  };

  const roomCounts = {
    all: rooms.length,
    occupied: rooms.filter(r => r.type === 'occupied').length,
    available: rooms.filter(r => r.type === 'available').length,
    maintenance: rooms.filter(r => r.type === 'maintenance').length
  };

  return (
    <div className={`room-grid-container ${darkMode ? 'dark' : ''}`}>
      {/* Header */}
      <div className="room-grid-header">
        <h1 className={`room-grid-title ${darkMode ? 'dark' : ''}`}>
          Qu·∫£n l√Ω Ph√≤ng & Thi·∫øt b·ªã
        </h1>
        <p className={`room-grid-subtitle ${darkMode ? 'dark' : ''}`}>
          Theo d√µi tr·∫°ng th√°i v√† qu·∫£n l√Ω vi·ªác m∆∞·ª£n tr·∫£ thi·∫øt b·ªã trong c√°c ph√≤ng h·ªçc, 
          ph√≤ng th√≠ nghi·ªám m·ªôt c√°ch hi·ªáu qu·∫£ v√† d·ªÖ d√†ng.
        </p>
      </div>

      {/* Filter Buttons */}
      <div className="filter-section">
        <button 
          className={`filter-button ${filter === 'all' ? 'active' : ''}`}
          onClick={() => setFilter('all')}
        >
          <span>üè¢</span>
          T·∫•t c·∫£ ({roomCounts.all})
        </button>
        <button 
          className={`filter-button occupied ${filter === 'occupied' ? 'active' : ''}`}
          onClick={() => setFilter('occupied')}
        >
          <span>üî¥</span>
          ƒêang s·ª≠ d·ª•ng ({roomCounts.occupied})
        </button>
        <button 
          className={`filter-button available ${filter === 'available' ? 'active' : ''}`}
          onClick={() => setFilter('available')}
        >
          <span>üü¢</span>
          S·∫µn s√†ng ({roomCounts.available})
        </button>
        <button 
          className={`filter-button ${filter === 'maintenance' ? 'active' : ''}`}
          onClick={() => setFilter('maintenance')}
        >
          <span>üü°</span>
          B·∫£o tr√¨ ({roomCounts.maintenance})
        </button>
      </div>

      {/* Rooms Grid */}
      <div className="rooms-grid">
        {filteredRooms.map((room) => (
          <div 
            key={room.id} 
            className={`room-card ${room.type} ${darkMode ? 'dark' : ''}`}
          >
            {/* Room Header */}
            <div className="room-header">
              <h3 className="room-id">{room.id}</h3>
              <span className={`room-status ${room.type}`}>
                {getStatusText(room.type)}
              </span>
            </div>

            {/* Room Title */}
            {room.title && (
              <p className="room-title">{room.title}</p>
            )}

            {/* Devices Section */}
            <div className="devices-section">
              <h4 className="devices-title">Thi·∫øt b·ªã</h4>
              <div className="devices-list">
                {room.devices.length > 0 ? (
                  room.devices.map((device, index) => (
                    <div key={index} className="device-item">
                      <span className="device-icon">{device.icon}</span>
                      <span className="device-count">{device.count}</span>
                      <span>{device.name}</span>
                    </div>
                  ))
                ) : (
                  <div className="device-item">
                    <span className="device-icon">üì≠</span>
                    <span>Kh√¥ng c√≥ thi·∫øt b·ªã</span>
                  </div>
                )}
              </div>
            </div>

            {/* Action Button */}
            <div className="room-actions">
              <button 
                className={`action-button ${room.type}`}
                onClick={() => handleRoomAction(room)}
                disabled={room.type === 'maintenance'}
              >
                {getActionText(room.type)}
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Empty State */}
      {filteredRooms.length === 0 && (
        <div style={{
          textAlign: 'center',
          padding: '60px 20px',
          color: darkMode ? '#9ca3af' : '#6b7280'
        }}>
          <div style={{ fontSize: '48px', marginBottom: '16px' }}>üîç</div>
          <h3 style={{ fontSize: '18px', marginBottom: '8px' }}>
            Kh√¥ng t√¨m th·∫•y ph√≤ng n√†o
          </h3>
          <p>Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ƒë·ªÉ xem c√°c ph√≤ng kh√°c</p>
        </div>
      )}
    </div>
  );
};

export default RoomGrid;